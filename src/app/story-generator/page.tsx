'use client';

import ReactFlow, { MiniMap, Controls, Background } from 'reactflow'
import 'reactflow/dist/style.css';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

/* ---------- Helper ---------- */
const SelectMulti = ({ label, value, onChange, options }: any) => (
  <div>
    <label className="block text-sm font-medium mb-1">{label}</label>
    <Select
      value={Array.isArray(value) ? value.join(',') : value}
      onValueChange={(v) => onChange(v.split(',').filter(Boolean))}
    >
      <SelectTrigger>
        <SelectValue placeholder={`S√©lectionner ${label.toLowerCase()}`} />
      </SelectTrigger>
      <SelectContent>
        {options.map((o: string) => (
const SelectMulti = ({ label, value, onChange, options }: any) => {
  const safeValue = Array.isArray(value) ? value : value ? [value] : [];
  return (
    <div>
      <label className="block text-sm font-medium mb-1">{label}</label>
      <Select
        value={safeValue.join(',')}
        onValueChange={(v) => {
          const arr = v ? v.split(',').filter(Boolean) : [];
          onChange(arr.length === 1 ? arr[0] : arr);
        }}
      >
        <SelectTrigger>
          <SelectValue placeholder={`S√©lectionner ${label.toLowerCase()}`} />
        </SelectTrigger>
        <SelectContent>
          {options.map((o: string) => (
            <SelectItem key={o} value={o}>
              {o}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  );
};
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="flex flex-col gap-1">
      <label className="block text-sm font-medium">{label}</label>
      <Textarea value={value} onChange={(e) => onChange(e.target.value)} placeholder={placeholder} className="min-h-20" />
      <Button onClick={suggest} size="sm" variant="outline" disabled={loading}>
        üí° {loading ? '‚Ä¶' : 'Sugg√©rer'}
      </Button>
    </div>
  );
};
4
export default function UltimateNCPGenerator() {
  const [tab, setTab] = useState('story');

  /* ---------- STRUCTURE ---------- */
  const [story, setStory] = useState({
    prompt: '',
    title: '',
    duration: '',
    chapters: '',
    tomes: '',
    genre: [] as string[],
    love: [] as string[],
    event: [] as string[],
    eventType: [] as string[],
    animals: [] as string[],
    animalRole: [] as string[],
    creativity: '',
    audience: '',
    ageRange: '',
    diversity: [] as string[],
    perspective: [] as string[],
    style: [] as string[],
    tone: [] as string[],
    chronology: '',
    forbiddenWords: '',
    creativityLevel: '',
    authorStyle: '',
    avoidRepetition: false,
    customStyle: '',
    narration: [] as string[],
    ending: [] as string[],
    cliffhanger: [] as string[],
    tensionLevel: '',
    allowDeath: [] as string[],
    allowSex: [] as string[],
    opening: [] as string[],
    supportType: '',
    commercialGoal: '',
    splitAudio: false,
    seo: false,
  });

  const [character, setCharacter] = useState({
    name: '',
    nickname: '',
    age: '',
    gender: '',
    appearance: '',
    personality: '',
    backstory: '',
    motivation: '',
    conflict: '',
    relationships: '',
    profession: '',
    skills: '',
    fatalFlaw: '',
    desire: '',
    fear: '',
    contextBirth: '',
    education: '',
    childhood: '',
    family: '',
    trauma: '',
    shortGoals: '',
    longGoals: '',
    obstacles: '',
    dreams: '',
    secrets: '',
    internalConflict: '',
    externalConflict: '',
    stressSources: '',
    friends: '',
    enemies: '',
    mentors: '',
    growthArc: '',
    dialogueStyle: '',
    residence: '',
    culturalContext: '',
    economicStatus: '',
  });

  const [chapters, setChapters] = useState({
    count: '1',
    structure: '',
    pacing: '',
    midpoint: '',
    climax: '',
    resolution: '',
    cliffhangers: false,
    flashbacks: false,
    multiTimeline: false,
    globalArc: [] as string[],
    arcType: [] as string[],
    timelineStyle: '',
    scenesPerChapter: '',
    acts: '',
  });

  const [links, setLinks] = useState({
    loyaltyConflict: false,
    redemptionQuest: false,
    raceAgainstTime: false,
    betrayal: false,
    familySecret: false,
    forbiddenLove: false,
    powerCorruption: false,
    survival: false,
    rivalry: false,
    truthQuest: false,
    intrigueLevel: [] as string[],
    genealogy: '',
  });

  const [locations, setLocations] = useState({
    urban: [] as string[],
    rural: [] as string[],
    coastal: [] as string[],
    fantasy: [] as string[],
    historical: [] as string[],
    futuristic: [] as string[],
    mystical: [] as string[],
    industrial: [] as string[],
    transport: [] as string[],
    leisure: [] as string[],
  });

  const [themes, setThemes] = useState({
    general: [] as string[],
    sport: [] as string[],
    erotic: [] as string[],
    professional: [] as string[],
  });

  const [customization, setCustomization] = useState({
    creativityLevel: '',
    style: [] as string[],
    tone: [] as string[],
    death: [] as string[],
    sex: [] as string[],
    opening: [] as string[],
  });

  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const [nodes, setNodes] = useState<any[]>([]);
const [edges, setEdges] = useState<any[]>([]);

useEffect(() => {
  const initialNodes = [
    { id: '1', position: { x: 250, y: 5 }, data: { label: 'Histoire' } },
  ];

  const selectedLinks = Object.entries(links)
    .filter(([, value]) => value)
    .map(([key]) => key);

  if (selectedLinks.length > 0) {
    initialNodes.push({ id: '2', position: { x: 250, y: 100 }, data: { label: 'Intrigues' } });
    initialNodes.push(...selectedLinks.map((link, i) => ({
      id: `link-${i}`,
      position: { x: i * 150, y: 200 },
      data: { label: link.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase()) },
    })));
    setEdges([
      { id: 'e1-2', source: '1', target: '2' },
      ...selectedLinks.map((link, i) => ({ id: `e2-link-${i}`, source: '2', target: `link-${i}` })),
    ]);
  }

  if (character.name) {
    initialNodes.push({ id: '3', position: { x: 500, y: 100 }, data: { label: `Personnage: ${character.name}` } });
    setEdges((eds) => [...eds, { id: 'e1-3', source: '1', target: '3' }]);
  }

  setNodes(initialNodes);
}, [links, character.name]);

  /* ---------- UTILS ---------- */
  const handleMulti = (setter: any, key: string) => (v: string) =>
    setter((prev: any) => ({ ...prev, [key]: v.split(',').filter(Boolean) }));

  const suggest = async (label: string, setter: any) => {
    try {
      const res = await fetch('/api/openrouter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt: `Sugg√®re une id√©e pour : ${label}`, maxTokens: 80 }),
      });
      const data = await res.json();
      setter(data.result?.trim() || '');
    } catch {
      alert('Erreur suggestion');
    }
  };

  const generateAll = async () => {
    if (!story.prompt) return alert('Entrez une id√©e');
    setLoading(true);
    const payload = { story, character, chapters, links, locations, themes, customization };
    try {
      const res = await fetch('/api/openrouter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt: `G√©n√®re une histoire NCP compl√®te : ${JSON.stringify(payload, null, 2)}`, maxTokens: 3500 }),
      });
      const data = await res.json();
      setResult(data.result || '');
    } finally {
      setLoading(false);
    }
  };

  /* ---------- OPTIONS ---------- */
  const genres = ["Education","Original","Classique","Humour","Science-fiction","Space opera","Extra-terrestre","Dystopie","Uchronie","Steampunk","Action","Thriller","Horreur","R√©aliste","Biographie","Fiction","Non-fiction","Drame","Myst√®re","Voyage dans le temps","Bataille","Com√©die","Kawaii","Magie","Mecha Battle","Fantasy","Aventure","Vengeance","Samoura√Ø","Ninja","Kpop","Suspense","Gu√©rison","√âmotion","Superpouvoirs","Crime","Vie quotidienne","Comp√©tition","Historique","√âpique","Guerre","Sports"];
  const loveOptions = ["Intrigue","Romance l√©g√®re","Romance intense","Romance complexe","New romance","Dark Romance","SM Romance","BDSM Romance","Passion","Passion amoureuse","Rupture amoureuse","Echangisme","Boys' Love","Girls‚Äô Love","Triangle amoureux","Amour impossible","Premi√®re amour","Erotique","Pornographique","Amour torride","Amour toxique","Amour tordu","amour amical","sex friend","amour √† distance","amour virtuel","amour multiple","amour interdit","amour perdu","Amour polyamoureux","Amour asexuel"];
  const events = ["Difficult√© √† l‚Äô√©cole","Harc√®lement","Sauver le monde","Sauver les autres","Rupture amicale","Triangle amoureux","Coup de foudre","Malentendu","Explorer l'inconnu","√âveil du h√©ros","Amn√©sie","Myst√®re de l'identit√©","Travail d'√©quipe","Voyage dans le temps et l'espace","Bataille fatale","Trahison par la famille","Secret de famille","√âv√©nement myst√©rieux","Ascension du m√©chant","Civilisation perdue","Monde virtuel","Survie √† l'apocalypse","Progression professionnelle","Croissance dans l'adversit√©","Chassez les r√™ves","Vie ordinaire","Ment","Enqu√™te sur un √©v√©nement","Meurtre","Amour perdu et r√©uni","Test familial","Amour sado-masochiste","Douceur","D√©veloppement du personnage","Am√©lioration des comp√©tences","Retrait","Lutte pour le pouvoir","Guerre des gangs","Poursuite et √©vasion","Complot politique","Choc des civilisations","Myst√®re historique","Lutte commerciale","Adieu","Triste fin","Premier amour","Regret irr√©parable","Gestion d'entreprise","Croissance difficile","C√¥t√© obscur de l'industrie","D√©couverte scientifique","Catastrophe naturelle","R√©volution technologique"];
  const creativityLevels = ["Conservateur","√âquilibr√©","Inventif","Exp√©rimental","Traditionnel","Innovant","Classique","Moderne","Avant-Gardiste","√âclectique"];
  const tones = ["S√©rieux","Humoristique","Ironique","Sarcastique","M√©lancolique","Optimiste","Pessimiste","Neutre","Passionn√©","R√©fl√©chi"];
  const styles = ["R√©aliste","Po√©tique","Journalistique","√âpistolaire","Stream of Consciousness","Minimaliste","Descriptif","Dialogu√©","Lyrical","Satirique"];
  const locationsUrban = ["Ville Moderne","Quartier Historique","Banlieue R√©sidentielle","Centre Commercial","Ghetto Urbain"];
  const locationsRural = ["Ferme Agricole","Village de Campagne","For√™t et Nature","Montagnes et Collines","Lacs et Rivi√®res"];
  const locationsCoastal = ["Plage Tropicale","Port de P√™che","√éle D√©serte","Station Baln√©aire","Falaises et Grottes Marines"];
  const locationsFantasy = ["Royaume Magique","Univers Parall√®le","Monde Post-Apocalyptique","Espace et Plan√®tes Lointaines","Monde Sous-Marin"];
  const locationsHistorical = ["√âgypte Antique","Moyen √Çge Europ√©en","Renaissance Italienne","Guerre Mondiale","R√©volution Industrielle"];
  const locationsFuturistic = ["Ville Cyberpunk","Colonie Spatiale","Monde Post-Humain","Terre D√©vast√©e","Utopie Technologique"];
  const locationsMystical = ["Temple Ancien","For√™t Enchant√©e","Monast√®re Isol√©","Cimeti√®re Hant√©","Jardin Secret"];
  const locationsIndustrial = ["Usine Automobile","Laboratoire de Recherche","Centre de Donn√©es","Chantier de Construction","Mine Souterraine"];
  const locationsTransport = ["Train de Voyage","Navire de Croisi√®re","Station Spatiale","A√©roport International","Route de Campagne"];
  const locationsLeisure = ["Parc d'Attractions","Stade Sportif","Casino","Festival de Musique","Centre de Loisirs"];
  const themesGeneral = ["Romans et Litt√©rature","Romans d'amour","Science-fiction","Fantasy","Romans historiques","Thrillers psychologiques","Romans policiers","Litt√©rature jeunesse","Romans de d√©veloppement personnel","Romans d'aventure","Romans biographiques","Bandes Dessin√©es et Mangas","Shonen","Shojo","Seinen","Josei","Bandes dessin√©es franco-belges","Comics am√©ricains","Webtoons","Livres pour Enfants et Ados","Albums illustr√©s","Contes et fables","Livres √©ducatifs","Romans pour adolescents","Livres d'activit√©s et de coloriage","Livres de d√©veloppement personnel pour ados","Livres de science-fiction pour jeunes","Livres d'aventure pour enfants","Livres sur l'amiti√© et les relations","Livres de myst√®re pour jeunes d√©tectives","Livres Scolaires et √âducatifs","Manuels de math√©matiques","Livres de grammaire et de conjugaison","Cahiers d'exercices","Livres de pr√©paration aux examens","Manuels de sciences","Livres d'histoire et de g√©ographie","Livres de langues √©trang√®res","Livres de philosophie","Livres de litt√©rature","Livres de m√©thodologie et d'organisation","Sant√© et Bien-√™tre","Loisirs et Culture","D√©veloppement Personnel et Professionnel","Technologie et Informatique","Gestion de Projet et M√©thodologies Agiles","Marketing et Ventes","Finance et Comptabilit√©","Sant√© et Bien-√™tre au Travail","Entrepreneuriat et Innovation","Droit et R√©glementation","Langues et Communication","√âducation et Formation Continue","Litt√©rature Porno√©rotique"];
  const themesSport = ["Guides d'Entra√Ænement","Strat√©gies de football","Techniques de tennis","Sports de plein air","Sports collectifs","Sports individuels","Sports adapt√©s","Sports extr√™mes"];
  const themesErotic = ["Romans √ârotiques Contemporains","Nouvelles √©rotiques","√ârotique LGBTQ+","Guides √©rotiques","Fantasmes et f√©tichismes","Rencontres en ligne","Voyages √©rotiques"];
  const themesProfessional = ["D√©veloppement Personnel","Technologie","Gestion de projet","Marketing","Finance","Sant√© au travail","Entrepreneuriat","Droit","Langues","√âducation"];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <header className="bg-white border-b shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <h1 className="text-3xl font-bold text-blue-600">G√©n√©rateur Ultime NCP</h1>
          <p className="text-gray-600 mt-2">Toutes les options PDF int√©gr√©es + IA</p>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-4 py-8">
        <Tabs value={tab} onValueChange={setTab}>
          <TabsList className="mb-6">
            <TabsTrigger value="story">üìñ Histoire</TabsTrigger>
            <TabsTrigger value="character">üë§ Personnage</TabsTrigger>
            <TabsTrigger value="chapter">üìö Chapitres</TabsTrigger>
            <TabsTrigger value="links">üîó Liens & intrigues</TabsTrigger>
            <TabsTrigger value="locations">üìç Lieux</TabsTrigger>
            <TabsTrigger value="themes">üìö Th√®mes</TabsTrigger>
            <TabsTrigger value="custom">‚öôÔ∏è IA & Style</TabsTrigger>
          </TabsList>

          {/* ONGLET HISTOIRE */}
          <TabsContent value="story">
            <Card>
              <CardHeader><CardTitle>Histoire de base</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <TextWithSuggestion label="Titre du livre" value={story.title} onChange={(v) => setStory({ ...story, title: v })} placeholder="Titre" />
                <SelectMulti label="Genre" value={story.genre} onChange={handleMulti(setStory, 'genre')} options={genres} />
                <SelectMulti label="Amours" value={story.love} onChange={handleMulti(setStory, 'love')} options={loveOptions} />
                <SelectMulti label="√âv√©nements" value={story.event} onChange={handleMulti(setStory, 'event')} options={events} />
                <SelectMulti label="Animaux" value={story.animals} onChange={handleMulti(setStory, 'animals')} options={["ferme","jungle","zoo","domestique","dinosaure","sauvage","l√©gendaire","invent√©","mythologique","fantastique","dragon","licorne","cr√©atures marines","cr√©atures volantes"]} />
                <SelectMulti label="Cr√©ativit√©" value={[story.creativity]} onChange={(v) => setStory({ ...story, creativity: v[0] })} options={creativityLevels} />
                <SelectMulti label="Public" value={[story.audience]} onChange={(v) => setStory({ ...story, audience: v[0] })} options={["Adulte","Adolescent","Enfant"]} />
                <SelectMulti label="Tranche d'√¢ge" value={[story.ageRange]} onChange={(v) => setStory({ ...story, ageRange: v[0] })} options={["3-5 ans","6-8 ans","9-10 ans","11-13 ans","14-16 ans","17-20 ans","21-25 ans","26-35 ans","36-50 ans","51-65 ans","65+"]} />
                <SelectMulti label="Diversit√©" value={story.diversity} onChange={handleMulti(setStory, 'diversity')} options={["LGBTQ+","Personnes handicap√©es","Communaut√©s culturelles","genre","ethnicit√©","religion","philosophie"]} />
                <SelectMulti label="Perspective" value={story.perspective} onChange={handleMulti(setStory, 'perspective')} options={["Premi√®re personne","Deuxi√®me personne","Troisi√®me personne","Omniscient","Flux de conscience","√âpistolaire","Perspective multiples","Interactif","Observateur","≈íil de cam√©ra","Narrateur peu fiable"]} />
                <Input value={story.forbiddenWords} onChange={(e) => setStory({ ...story, forbiddenWords: e.target.value })} placeholder="Mots interdits" />
                <Input value={story.authorStyle} onChange={(e) => setStory({ ...story, authorStyle: e.target.value })} placeholder="Imiter un auteur" />
                <SelectMulti label="Support final" value={[story.supportType]} onChange={(v) => setStory({ ...story, supportType: v[0] })} options={["Ebook","Livre audio","Podcast","Vid√©o","Article de blog","Autre"]} />
                <SelectMulti label="Objectif commercial" value={[story.commercialGoal]} onChange={(v) => setStory({ ...story, commercialGoal: v[0] })} options={["Commercialisable","Cr√©ation pure","Autre"]} />
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={story.splitAudio} onChange={(e) => setStory({ ...story, splitAudio: e.target.checked })} />
                  S√©parer audio pour plusieurs voix
                </label>
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={story.seo} onChange={(e) => setStory({ ...story, seo: e.target.checked })} />
                  Optimiser SEO (article blog)
                </label>
                <SelectMulti
                  label="Style narratif"
                  value={story.narration}
                  onChange={handleMulti(setStory, 'narration')}
                  options={[
                    'Narratif classique',
                    'Descriptif',
                    'Dialogu√©',
                    'Monologue int√©rieur',
                    'Stream of consciousness',
                    '√âpistolaire',
                    'Journal intime',
                    'Chronique',
                  ]}
                />
                <SelectMulti
                  label="Type de R√©cit"
                  value={story.eventType}
                  onChange={handleMulti(setStory, 'eventType')}
                  options={[
                    'R√©cit interactif',
                    'R√©cit immersif',
                    'R√©cit po√©tique',
                    'R√©cit lyrique',
                    'R√©cit dramatique',
                    'R√©cit humoristique',
                    'R√©cit satirique',
                    'R√©cit ironique',
                    'R√©cit tragique',
                  ]}
                />
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET PERSONNAGE */}
          <TabsContent value="character">
            <Card>
              <CardHeader><CardTitle>Fiche personnage compl√®te</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <TextWithSuggestion label="Nom complet" value={character.name} onChange={(v) => setCharacter({ ...character, name: v })} placeholder="Nom" />
                <TextWithSuggestion label="Surnoms" value={character.nickname} onChange={(v) => setCharacter({ ...character, nickname: v })} placeholder="Surnoms" />
                <Input value={character.age} onChange={(e) => setCharacter({ ...character, age: e.target.value })} placeholder="√Çge" />
                <SelectMulti label="Genre" value={[character.gender]} onChange={(v) => setCharacter({ ...character, gender: v[0] })} options={["Masculin","F√©minin","Non-binaire"]} />
                <TextWithSuggestion label="Apparence" value={character.appearance} onChange={(v) => setCharacter({ ...character, appearance: v })} placeholder="Apparence physique" />
                <TextWithSuggestion label="Personnalit√©" value={character.personality} onChange={(v) => setCharacter({ ...character, personality: v })} placeholder="Traits de personnalit√©" />
                <TextWithSuggestion label="Profession" value={character.profession} onChange={(v) => setCharacter({ ...character, profession: v })} placeholder="Profession actuelle" />
                <TextWithSuggestion label="Comp√©tences" value={character.skills} onChange={(v) => setCharacter({ ...character, skills: v })} placeholder="Comp√©tences sp√©cialis√©es" />
                <TextWithSuggestion label="D√©faut fatal" value={character.fatalFlaw} onChange={(v) => setCharacter({ ...character, fatalFlaw: v })} placeholder="D√©faut fatal" />
                <TextWithSuggestion label="D√©sir principal" value={character.desire} onChange={(v) => setCharacter({ ...character, desire: v })} placeholder="D√©sir profond" />
                <TextWithSuggestion label="Peur profonde" value={character.fear} onChange={(v) => setCharacter({ ...character, fear: v })} placeholder="Peur" />
                <TextWithSuggestion label="Contexte de naissance" value={character.contextBirth} onChange={(v) => setCharacter({ ...character, contextBirth: v })} placeholder="Lieu de naissance et origine" />
                <TextWithSuggestion label="√âducation" value={character.education} onChange={(v) => setCharacter({ ...character, education: v })} placeholder="√âducation et formation" />
                <TextWithSuggestion label="Enfance" value={character.childhood} onChange={(v) => setCharacter({ ...character, childhood: v })} placeholder="Exp√©riences marquantes" />
                <TextWithSuggestion label="Famille" value={character.family} onChange={(v) => setCharacter({ ...character, family: v })} placeholder="Relations familiales" />
                <TextWithSuggestion label="Trauma" value={character.trauma} onChange={(v) => setCharacter({ ...character, trauma: v })} placeholder="√âv√©nements traumatisants" />
                <TextWithSuggestion label="Objectifs courts" value={character.shortGoals} onChange={(v) => setCharacter({ ...character, shortGoals: v })} placeholder="Objectifs √† court terme" />
                <TextWithSuggestion label="Objectifs longs" value={character.longGoals} onChange={(v) => setCharacter({ ...character, longGoals: v })} placeholder="Objectifs √† long terme" />
                <TextWithSuggestion label="Obstacles" value={character.obstacles} onChange={(v) => setCharacter({ ...character, obstacles: v })} placeholder="Obstacles √† surmonter" />
                <TextWithSuggestion label="Secrets" value={character.secrets} onChange={(v) => setCharacter({ ...character, secrets: v })} placeholder="Secrets" />
                <TextWithSuggestion label="Conflit interne" value={character.internalConflict} onChange={(v) => setCharacter({ ...character, internalConflict: v })} placeholder="Conflits internes" />
                <TextWithSuggestion label="Conflit externe" value={character.externalConflict} onChange={(v) => setCharacter({ ...character, externalConflict: v })} placeholder="Conflits externes" />
                <TextWithSuggestion label="Amis proches" value={character.friends} onChange={(v) => setCharacter({ ...character, friends: v })} placeholder="Amis proches" />
                <TextWithSuggestion label="Ennemis" value={character.enemies} onChange={(v) => setCharacter({ ...character, enemies: v })} placeholder="Ennemis ou rivaux" />
                <TextWithSuggestion label="Mentors" value={character.mentors} onChange={(v) => setCharacter({ ...character, mentors: v })} placeholder="Mentors" />
                <TextWithSuggestion label="Arc de croissance" value={character.growthArc} onChange={(v) => setCharacter({ ...character, growthArc: v })} placeholder="Arc de croissance" />
                <TextWithSuggestion label="Dialogue style" value={character.dialogueStyle} onChange={(v) => setCharacter({ ...character, dialogueStyle: v })} placeholder="Style de dialogue" />
                <TextWithSuggestion label="R√©sidence" value={character.residence} onChange={(v) => setCharacter({ ...character, residence: v })} placeholder="Lieu de r√©sidence" />
                <TextWithSuggestion label="Contexte culturel" value={character.culturalContext} onChange={(v) => setCharacter({ ...character, culturalContext: v })} placeholder="Contexte culturel" />
                <TextWithSuggestion label="Statut √©conomique" value={character.economicStatus} onChange={(v) => setCharacter({ ...character, economicStatus: v })} placeholder="Statut √©conomique" />
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET CHAPITRES */}
          <TabsContent value="chapter">
            <Card>
              <CardHeader><CardTitle>Planification des chapitres</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <SelectMulti
                  label="Longueur de l'histoire"
                  value={[story.duration]}
                  onChange={(v) => setStory({ ...story, duration: v[0] })}
                  options={[
                    'Micro Fiction (100 √† 500 mots)',
                    'Courte Nouvelle (1000-2500 mots)',
                    'Moyenne Nouvelle (2501-5000 mots)',
                    'Longue Nouvelle (5001-7500 mots)',
                    'Roman court (7501-10 000 mots)',
                    'Roman Moyen (10 001-30 000 mots)',
                    'Roman Long (30 001+ mots)',
                  ]}
                />
                <div>
                  <label className="block text-sm font-medium mb-1">Style narratif</label>
                  <div className="grid grid-cols-2 gap-2">
                    <Input
                      type="number"
                      placeholder="Sc√®nes par Chapitre"
                      onChange={(e) => setChapters({ ...chapters, scenesPerChapter: e.target.value })}
                    />
                    <Input
                      type="number"
                      placeholder="Nombre de Chapitres"
                      value={chapters.count}
                      onChange={(e) => setChapters({ ...chapters, count: e.target.value })}
                    />
                    <Input
                      type="number"
                      placeholder="Nombre d'Actes"
                      onChange={(e) => setChapters({ ...chapters, acts: e.target.value })}
                    />
                    <Input
                      type="number"
                      placeholder="Nombre de Tomes"
                      onChange={(e) => setStory({ ...story, tomes: e.target.value })}
                    />
                  </div>
                </div>
                <SelectMulti label="Structure" value={[chapters.structure]} onChange={(v) => setChapters({ ...chapters, structure: v[0] })} options={["Acte 3","Acte 5","Hero‚Äôs Journey","Freytag","Save the Cat!"]} />
                <SelectMulti label="Pacing" value={[chapters.pacing]} onChange={(v) => setChapters({ ...chapters, pacing: v[0] })} options={["Lent","Mod√©r√©","Rapide","Variable"]} />
                <SelectMulti
                  label="Timeline style"
                  value={[chapters.timelineStyle]}
                  onChange={(v) => setChapters({ ...chapters, timelineStyle: v[0] })}
                  options={[
                    'R√©cit Lin√©aire',
                    'R√©cit Non lin√©aire',
                    'Flashbacks',
                    'Anticipations',
                    'R√©cit ench√¢ss√©',
                    'Timelines parall√®les',
                    'Sauts temporels',
                    'Boucles temporelles',
                    'R√©cit circulaire',
                    'R√©cit en spirale',
                    'Structure en miroir',
                    'Structure en actes',
                    'Structure pyramidale',
                    'Structure en cascade',
                    'Structure modulaire',
                    'Structure fragment√©e',
                    'Structure kal√©idoscopique',
                    'Structure labyrinthique',
                  ]}
                />
                <SelectMulti label="Global Arc" value={chapters.globalArc} onChange={handleMulti(setChapters, 'globalArc')} options={["Voyage du H√©ros","Chute et R√©demption","Qu√™te","Transformation","D√©couverte de Soi","R√©volte","Survie","Ascension et Chute","Qu√™te de V√©rit√©","R√©conciliation"]} />
                <SelectMulti label="Arc type" value={chapters.arcType} onChange={handleMulti(setChapters, 'arcType')} options={["Arc principal","Arc secondaire","Sous-arc"]} />
                <TextWithSuggestion label="Twist du milieu" value={chapters.midpoint} onChange={(v) => setChapters({ ...chapters, midpoint: v })} placeholder="Twist central" />
                <TextWithSuggestion label="Climax" value={chapters.climax} onChange={(v) => setChapters({ ...chapters, climax: v })} placeholder="Climax" />
                <TextWithSuggestion label="R√©solution" value={chapters.resolution} onChange={(v) => setChapters({ ...chapters, resolution: v })} placeholder="R√©solution finale" />
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={chapters.cliffhangers} onChange={(e) => setChapters({ ...chapters, cliffhangers: e.target.checked })} />
                  Cliffhangers
                </label>
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={chapters.flashbacks} onChange={(e) => setChapters({ ...chapters, flashbacks: e.target.checked })} />
                  Flashbacks
                </label>
                <label className="flex items-center gap-2">
                  <input type="checkbox" checked={chapters.multiTimeline} onChange={(e) => setChapters({ ...chapters, multiTimeline: e.target.checked })} />
                  Timelines multiples
                </label>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET LIENS & INTRIGUES */}
          <TabsContent value="links">
            <Card>
              <CardHeader><CardTitle>Liens & intrigues entre personnages</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  { key: 'loyaltyConflict', label: 'Conflit de loyaut√©' },
                  { key: 'redemptionQuest', label: 'Qu√™te de r√©demption' },
                  { key: 'raceAgainstTime', label: 'Course contre la montre' },
                  { key: 'betrayal', label: 'Trahison' },
                  { key: 'familySecret', label: 'Secret de famille' },
                  { key: 'forbiddenLove', label: 'Amour interdit' },
                  { key: 'powerCorruption', label: 'Corruption par le pouvoir' },
                  { key: 'survival', label: 'Survie' },
                  { key: 'rivalry', label: 'Rivalit√©' },
                  { key: 'truthQuest', label: 'Qu√™te de v√©rit√©' },
                ].map(({ key, label }) => (
                  <label key={key} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={(links as any)[key]}
                      onChange={(e) => setLinks({ ...links, [key]: e.target.checked })}
                    />
                    {label}
                  </label>
                ))}
                <SelectMulti label="Niveau d'intrigue" value={links.intrigueLevel} onChange={handleMulti(setLinks, 'intrigueLevel')} options={["Intrigue principale","Intrigue secondaire","Sous-intrigue"]} />
                <TextWithSuggestion label="Arbre g√©n√©alogique" value={links.genealogy} onChange={(v) => setLinks({ ...links, genealogy: v })} placeholder="Arbre g√©n√©alogique" />
              </CardContent>
            </Card>
           <Card className="mt-6">
  <CardHeader><CardTitle>Mind Map des intrigues</CardTitle></CardHeader>
  <CardContent>
    <div style={{ height: '500px' }}>
      <ReactFlow nodes={nodes} edges={edges}>
        <MiniMap />
        <Controls />
        <Background />
      </ReactFlow>
    </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET LIEUX */}
          <TabsContent value="locations">
            <Card>
              <CardHeader><CardTitle>Lieux des actions</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <SelectMulti label="Urbain" value={locations.urban} onChange={handleMulti(setLocations, 'urban')} options={locationsUrban} />
                <SelectMulti label="Rural" value={locations.rural} onChange={handleMulti(setLocations, 'rural')} options={locationsRural} />
                <SelectMulti label="C√¥tier" value={locations.coastal} onChange={handleMulti(setLocations, 'coastal')} options={locationsCoastal} />
                <SelectMulti label="Fantastique" value={locations.fantasy} onChange={handleMulti(setLocations, 'fantasy')} options={locationsFantasy} />
                <SelectMulti label="Historique" value={locations.historical} onChange={handleMulti(setLocations, 'historical')} options={locationsHistorical} />
                <SelectMulti label="Futuriste" value={locations.futuristic} onChange={handleMulti(setLocations, 'futuristic')} options={locationsFuturistic} />
                <SelectMulti label="Mystique" value={locations.mystical} onChange={handleMulti(setLocations, 'mystical')} options={locationsMystical} />
                <SelectMulti label="Industriel" value={locations.industrial} onChange={handleMulti(setLocations, 'industrial')} options={locationsIndustrial} />
                <SelectMulti label="Transport" value={locations.transport} onChange={handleMulti(setLocations, 'transport')} options={locationsTransport} />
                <SelectMulti label="Loisirs" value={locations.leisure} onChange={handleMulti(setLocations, 'leisure')} options={locationsLeisure} />
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET TH√àMES */}
          <TabsContent value="themes">
            <Card>
              <CardHeader><CardTitle>Th√®mes des livres</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <SelectMulti label="G√©n√©ral" value={themes.general} onChange={handleMulti(setThemes, 'general')} options={themesGeneral} />
                <SelectMulti label="Sport" value={themes.sport} onChange={handleMulti(setThemes, 'sport')} options={themesSport} />
                <SelectMulti label="√ârotique" value={themes.erotic} onChange={handleMulti(setThemes, 'erotic')} options={themesErotic} />
                <SelectMulti label="Professionnel" value={themes.professional} onChange={handleMulti(setThemes, 'professional')} options={themesProfessional} />
              </CardContent>
            </Card>
          </TabsContent>

          {/* ONGLET PERSONNALISATION IA */}
          <TabsContent value="custom">
            <Card>
              <CardHeader><CardTitle>Personnalisation IA</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <SelectMulti label="Niveau de cr√©ativit√©" value={[customization.creativityLevel]} onChange={(v) => setCustomization({ ...customization, creativityLevel: v[0] })} options={creativityLevels} />
                <SelectMulti
                  label="Style d‚Äô√©criture"
                  value={customization.style}
                  onChange={handleMulti(setCustomization, 'style')}
                  options={[
                    'S√©rieux',
                    'Humoristique',
                    'Ironique',
                    'Sarcastique',
                    'M√©lancolique',
                    'Optimiste',
                    'Pessimiste',
                    'Neutre',
                    'Passionn√©',
                    'R√©fl√©chi',
                    'Dramatique',
                    'Comique',
                    'Tragique',
                    'Romantique',
                    'Sexy',
                    'Myst√©rieux',
                    'Suspense',
                    '√âmotionnel',
                    'Philosophique',
                    'Politique',
                    'Social',
                    'Culturel',
                    'Historique',
                    'Scientifique',
                    'Fantastique',
                    'Horrifique',
                    '√ârotique',
                    'Pornographique',
                    '√âducationnel',
                    'Inspirant',
                    'Motivant',
                    'R√©v√©lateur',
                    'Provocateur',
                    'R√©volutionnaire',
                    'Traditionnel',
                    'Moderne',
                    'Classique',
                    'Avant-gardiste',
                    'Exp√©rimental',
                    'Toxique',
                  ]}
                />
                <SelectMulti label="Ton" value={customization.tone} onChange={handleMulti(setCustomization, 'tone')} options={tones} />
                <SelectMulti label="Types de mort" value={customization.death} onChange={handleMulti(setCustomization, 'death')} options={["Mort h√©ro√Øque","Sacrifice","Trahison mortelle","Mort inattendue","Mort symbolique","Mort tragique","Mort myst√©rieuse","Mort en combat","Mort par maladie","Mort par accident"]} />
                <SelectMulti label="Types de sexe" value={customization.sex} onChange={handleMulti(setCustomization, 'sex')} options={["Sc√®nes de s√©duction","Sc√®nes d'amour","Sc√®nes √©rotiques","Sc√®nes de passion","Sc√®nes de d√©sir","Sc√®nes de tentative","Sc√®nes de rencontre","Sc√®nes de relation interdite","Sc√®nes de relation complexe"]} />
                <SelectMulti label="Phrases d‚Äôouverture" value={customization.opening} onChange={handleMulti(setCustomization, 'opening')} options={["Myst√©rieuse","Intrigante","Dramatique","Po√©tique","Humouristique","√âmotionnelle","Suspense","R√©fl√©chie","Descriptive","Inspirante"]} />
                <Input
                  placeholder="Style d'auteur √† imiter"
                  value={story.authorStyle}
                  onChange={(e) => setStory({ ...story, authorStyle: e.target.value })}
                />
                <Textarea
                  placeholder="Mon style d‚Äô√©criture (2000 caract√®res max)"
                  maxLength={2000}
                  onChange={(e) => setStory({ ...story, customStyle: e.target.value })}
                />
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={story.avoidRepetition}
                    onChange={(e) => setStory({ ...story, avoidRepetition: e.target.checked })}
                  />
                  √âviter les r√©p√©titions
                </label>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* ACTIONS GLOBALES */}
        <div className="mt-6 flex flex-wrap gap-2">
          <Button onClick={generateAll} disabled={loading} className="bg-blue-600 hover:bg-blue-700">
            {loading ? 'G√©n√©ration en cours...' : 'G√©n√©rer tout'}
          </Button>
          <Button onClick={async () => alert('Envoy√© √† n8n !')} disabled={loading} variant="outline">
            üì§ Envoyer √† n8n
          </Button>
        </div>

        {result && (
          <Card className="mt-6">
            <CardHeader><CardTitle>R√©sultat g√©n√©r√©</CardTitle></CardHeader>
            <CardContent>
              <pre className="whitespace-pre-wrap text-sm">{result}</pre>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
